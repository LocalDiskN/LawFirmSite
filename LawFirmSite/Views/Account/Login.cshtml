@using LawFirmSite.Consts
@model LawFirmSite.Models.Login
@{
    ViewBag.Title = "Login";
}

<div class="container">
    <h2 id="PageHeadline" class="headitem text-center headlineColor"></h2>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group d-none">
                @Html.LabelFor(model => model.ReturnUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ReturnUrl, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ReturnUrl, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label col-md-2", @id = "Username" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2", @id = "Password" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.RememberMe, htmlAttributes: new { @class = "control-label col-md-2", @id = "RememberMe" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.RememberMe, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.RememberMe, "", new { @class = "text-danger" })
                </div>
            </div>
            <input id="langfield" type="hidden" name="lang" value="" />
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input id="Login" type="submit" class="btn btn-primary" />
                    @{
                        <a id="Cancel" href="/Home/Index" class="btn btn-primary"></a>
                    }
                </div>
            </div>
        </div>
    }
</div>


<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

<script>
    {
        var crumbstr = @Html.Raw(Json.Encode(ViewBag.LayoutModel.languages));

    for (var i = 0; i < crumbstr.length; i++) {
        if (crumbstr[i].Content !== "") {
            crumbstr = crumbstr[i];
            console.log(crumbstr.Content);
            document.getElementById("Username").innerHTML = getValueFromDic(crumbstr.Content, "Username");
            document.getElementById("Password").innerHTML = getValueFromDic(crumbstr.Content, "Password");
            document.getElementById("RememberMe").innerHTML = getValueFromDic(crumbstr.Content, "RememberMe");
            document.getElementById("Login").value = getValueFromDic(crumbstr.Content, "Login");
            document.getElementById("Cancel").innerHTML = getValueFromDic(crumbstr.Content, "Cancel");
            document.getElementById("langfield").value = crumbstr.Abbreviation;
            break;
        }
        }
        document.getElementById("PageHeadline").innerHTML = getValueFromDic(crumbstr.Content, "Login");
    }
</script>